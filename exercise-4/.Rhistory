# (June 8, 2018). Make sure to use the `as.Date` function again
summer_break <- as.Date("June 8, 2018")
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2018). Make sure to use the `as.Date` function again
summer_break <- as.Date("June 8, 2018", format("%B %D %Y"))
summer_break
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2018). Make sure to use the `as.Date` function again
summer_break <- as.Date(June 8, 2018)
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2018). Make sure to use the `as.Date` function again
summer_break <- as.Date(June 8, 2018, "%m %d %Y")
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2018). Make sure to use the `as.Date` function again
summer_break <- as.Date(June 8, "%m %d, %y")
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2018). Make sure to use the `as.Date` function again
summer_break <- as.Date("June 8, 2018", "%m %d, %y")
summer_break
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2018). Make sure to use the `as.Date` function again
summer_break <- as.Date("June 8, 2018", format="%B %d %Y")
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2018). Make sure to use the `as.Date` function again
summer_break <- as.Date("June 8, 2018", format="%B %d, %Y")
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- as.Date(summer_break-today)
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- as.Date(summer_break - today)
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- summer_break - today
days_to_break
today
summer_break
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.". ########
make_introduction <- function(name, age) {
return(paste("Hello, my name is ", name, ", and I'm", age, "years old."))
}
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
days <- as.Date(birthday) - Sys.Date()
return(make_introduction(name, age), paste("In", days, "I'll be", age+1))
}
make_birthday_intro(Yupeng, 21, 5/9/2018)
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
days <- as.Date(birthday, format="%B %d, %Y") - Sys.Date()
return(make_introduction(name, age), paste("In", days, "I'll be", age+1))
}
make_birthday_intro(Yupeng, 21, "May 9,2018")
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
days <- as.Date(birthday, format="%B %d, %Y") - Sys.Date()
return(make_introduction(name, age), "In", days, "I'll be", age+1)
}
ake_birthday_intro(Yupeng, 21, "May 9,2018")
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
days <- as.Date(birthday, format="%B %d, %Y") - Sys.Date()
return(make_introduction(name, age), "In", days, "I'll be", age+1)
}
make_birthday_intro(Yupeng, 21, "May 9,2018")
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
days <- as.Date(birthday, format="%B %d, %Y") - Sys.Date()
return(paste(make_introduction(name, age), "In", days, "I'll be", age+1))
}
ake_birthday_intro(Yupeng, 21, "May 9,2018")
make_birthday_intro(Yupeng, 21, "May 9,2018")
make_birthday_intro("Yupeng", 21, "May 9,2018")
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
days <- as.Date(birthday, format="%B %d, %Y") - Sys.Date()
return(paste(make_introduction(name, age), "In", days, "days I'll be", age+1))
}
make_birthday_intro("Yupeng", 21, "May 9,2018")
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
days <- as.Date(birthday) - Sys.Date()
return(paste(make_introduction(name, age), "In", days, "days I'll be", age+1))
}
make_birthday_intro("Yupeng", 21, "May 9,2018")
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
days <- as.Date(birthday, format="%B %d, %Y") - Sys.Date()
return(paste(make_introduction(name, age), "In", days, "days I'll be", age+1))
}
make_birthday_intro("Yupeng", 21, "May 9,2018")
make_birthday_intro("Yupeng", 21, "May 9, 2018")
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro("Yupeng", 21, "May 9, 2018")
?//d
?\\d
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(strings) {
return(gsub("\\d", "", strings))
}
remove_digits("123fefef")
remove_digits("123fdfdsvfgf 767h ghr77")
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142")
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(strings) {
return(lapply(strings, gsub("\\d", "")))
}
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(strings) {
return(lapply(strings, gsub("\\d", "")))
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(strings) {
return(lapply(strings, gsub("\\d", "", strings)))
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
setwd("~/Desktop/info 201/a2-core-skills-YuupengWang")
setwd("~/Desktop/info 201/a2-core-skills-YuupengWang")
# The variables in a2 that should be created
variable_names <- c(
"my_age", "my_name", "minutes_in_a_day", "hours_in_a_year",
"more_minutes_than_hours", "my_intro", "casual_intro", "loud_intro",
"quiet_intro", "capitalized", "minutes_in_two_days", "occurrences",
"twenty_seven", "movies", "top_three", "excited", "without_four", "numbers",
"len", "numbers_mean", "numbers_median", "lower_numbers", "all_numbers",
"today", "summer_break", "days_to_break", "my_bday_intro", "my_name", "my_age"
)
function_names <- c(
"cube", "double", "make_birthday_intro",
"make_introduction", "remove_digits"
)
# Stores all of the variables available by sourcing
all_variables <- ls()
# Check if all variables have been created
for (name in variable_names) {
if (!(name %in% all_variables)) {
print(paste0("Variable ", name, " is not present."))
}
}
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
number_median <- median(numbers)
# Check if all variables have been created
for (name in variable_names) {
if (!(name %in% all_variables)) {
print(paste0("Variable ", name, " is not present."))
}
}
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Check if all variables have been created
for (name in variable_names) {
if (!(name %in% all_variables)) {
print(paste0("Variable ", name, " is not present."))
}
}
# Check if all variables have been created
for (name in variable_names) {
if (!(name %in% all_variables)) {
print(paste0("Variable ", name, " is not present."))
}
}
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
numbers_median
rm(number_median)
# Check if all variables have been created
for (name in variable_names) {
if (!(name %in% all_variables)) {
print(paste0("Variable ", name, " is not present."))
}
}
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Check if all variables have been created
for (name in variable_names) {
if (!(name %in% all_variables)) {
print(paste0("Variable ", name, " is not present."))
}
}
# Check if all functions have been created
for (name in function_names) {
if (!(name %in% all_variables)) {
print(paste0("Function ", name, " is not present."))
}
}
# Check if all variables have been created
for (name in variable_names) {
if (!(name %in% all_variables)) {
print(paste0("Variable ", name, " is not present."))
}
}
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_man <- mean(numbers)
# Check if all variables have been created
for (name in variable_names) {
if (!(name %in% all_variables)) {
print(paste0("Variable ", name, " is not present."))
}
}
rm(numbers_man)
# Check if all functions have been created
for (name in function_names) {
if (!(name %in% all_variables)) {
print(paste0("Function ", name, " is not present."))
}
}
# Check if all variables have been created
for (name in variable_names) {
if (!(name %in% all_variables)) {
print(paste0("Variable ", name, " is not present."))
}
}
len
# Check if all functions have been created
for (name in function_names) {
if (!(name %in% all_variables)) {
print(paste0("Function ", name, " is not present."))
}
}
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- 700:999
numbers
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- 700:999
# Using the built in `length()` function, create a variable `len` that is
# equal to the length of your vector `numbers`
len <- length(numbers)
len
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- c(700:999)
# Using the built in `length()` function, create a variable `len` that is
# equal to the length of your vector `numbers`
len <- length(numbers)
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.". ########
make_introduction <- function(name, age) {
return(paste("Hello, my name is ", name, ", and I'm", age, " years old."))
}
my_intro
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.". ########
make_introduction <- function(name, age) {
return(paste("Hello, my name is", name, ",and I'm", age, "years old."))
}
library("stringr")
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
casual_intro
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, "is a great movie!")
excited
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
days <- as.Date(birthday, format="%B %d, %Y") - today
return(paste(make_introduction(name, age), "In", days, "days I'll be", age+1))
}
my_bday_intro
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(strings) {
return(gsub("\\d", "", strings))
}
remove_digits(6sfgsf879s8fg)
remove_digits("sdfsdff897s98d9s8g")
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(strings) {
return(gsub("\\d", "", strings))
}
remove_digits(c("INFO 201", "CSE 142"))
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142", "jhhu4545jh"))
# Check if all variables have been created
for (name in variable_names) {
if (!(name %in% all_variables)) {
print(paste0("Variable ", name, " is not present."))
}
}
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
numbers_median
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- c(700:999)
numbers
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.". ########
make_introduction <- function(name, age) {
return(paste("Hello, my name is", name, ",and I'm", age, "years old."))
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
my_intro
my_intro
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
my_intro
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.". ########
make_introduction <- function(name, age) {
return(paste("Hello, my name is ", name, ", and I'm", age, "years old."))
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
my_intro
?data
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
USPerEx <- data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
colnames(USPerEx)
# What are the column names of your dataframe?
colnames(USPerEx)
View(USPerEx)
# What are the row names of your dataframe?
rownames(USPerEx)
# Add a column "category" to your data frame that contains the rownames
USPerEx$category <- rownames(USPerEx)
USPerEx$category
# How much money was spent on personal care in 1940?
USPerEx['Personal Care', 'X1940']
# How much money was spent on Food and Tobacco in 1960?
USPerEx['Food and Tobacco', 'X1960']
# What was the highest expenditure category in 1960?
max(USPerEx[ ,X1960])
# What was the highest expenditure category in 1960?
heightest1960 <- USPerEx$category[USPerEx$category == max(USPerEx$X1960)]
heightest1960
USPerEx$category[USPerEx$category == max(USPerEx$X1960)]
USPerEx$category == max(USPerEx$X1960)
# What was the highest expenditure category in 1960?
heightest1960 <- USPerEx$category[USPerEx$X1960 == max(USPerEx$X1960)]
heightest1960
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
time <- paste('X', year)
lowest <- USPerEx$category[USPerEx$time == min(USPerEx$time)]
}
lowest_category(1960)
is.data.frame(USPerEx)
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
time <- paste('X', year)
lowest <- USPerEx$category[USPerEx[, time] == min(USPerEx[, time])]
}
lowest_category(1960)
lowest_category(1960)
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
time <- paste('X', year)
USPerEx$category[USPerEx[, time] == min(USPerEx[, time])]
}
lowest_category(1960)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv(data/gates_money.csv, stringsAsFactors = FALSE)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
setwd("~/Desktop/info 201/ch9/ch9-data-frames/exercise-4")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# What was the mean grant value?
meanvalue <- mean(grants$total_amount)
# What was the dollar amount of the largest grant?
largestgrand <- max(grants$total_amount)
# What was the dollar amount of the smallest grant?
lowestgrand <- min(grants$total_amount)
lowestgrand
largestgrand
# Which organization received the largest grant?
largest_org <- grants$organization[grants$total_amount == largestgrand]
largest_org
# Which organization received the smallest grant?
smallest_org <- grands$organization[grants$total_amount == lowestgrand]
# Which organization received the smallest grant?
smallest_org <- grands$organization[grants$total_amount == lowestgrand]
# Which organization received the smallest grant?
smallest_org <- grants$organization[grants$total_amount == lowestgrand]
smallest_org
